(function ($) {
  "use strict";
  $.fn.counterUp = function (options) {
    var settings = $.extend({ time: 400, delay: 10 }, options);
    return this.each(function () {
      var $this = $(this),
        config = settings,
        countFunction = function () {
          var numbers = [],
            divisions = config.time / config.delay,
            value = $this.text().replace(/,/g, ""),
            isFormatted = /[0-9]+,[0-9]+/.test(value);

          var isInteger = /^[0-9]+$/.test(value),
            isFloat = /^[0-9]+\.[0-9]+$/.test(value),
            decimalPlaces = isFloat ? (value.split(".")[1] || []).length : 0;

          for (var i = divisions; i >= 1; i--) {
            var num = parseInt((value / divisions) * i);
            if (isFloat)
              num = parseFloat((value / divisions) * i).toFixed(decimalPlaces);
            if (isFormatted) {
              while (/(\d+)(\d{3})/.test(num.toString())) {
                num = num.toString().replace(/(\d+)(\d{3})/, "$1,$2");
              }
            }
            numbers.unshift(num);
          }

          $this.data("counterup-nums", numbers);
          $this.text("0");

          var updateCount = function () {
            var nums = $this.data("counterup-nums");
            if (nums && nums.length > 0) {
              $this.text(nums.shift());
              setTimeout($this.data("counterup-func"), config.delay);
            } else {
              $this.data("counterup-nums", null);
              $this.data("counterup-func", null);
            }
          };

          $this.data("counterup-func", updateCount);
          setTimeout($this.data("counterup-func"), config.delay);
        };

      if ($.fn.waypoint) {
        $this.waypoint(countFunction, { offset: "100%", triggerOnce: true });
      } else {
        countFunction();
      }
    });
  };
})(jQuery);
